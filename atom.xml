<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Fisher JJ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-20T03:00:18.937Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fisher JJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>esxi</title>
    <link href="http://example.com/2023/11/20/esxi/"/>
    <id>http://example.com/2023/11/20/esxi/</id>
    <published>2023-11-20T02:26:47.000Z</published>
    <updated>2023-11-20T03:00:18.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="物理网卡"><a href="#物理网卡" class="headerlink" title="物理网卡"></a>物理网卡</h3><h3 id="虚拟交换机"><a href="#虚拟交换机" class="headerlink" title="虚拟交换机"></a>虚拟交换机</h3><ul><li>相当于虚拟化了物理网卡的网口 <ul><li>新增虚拟网口</li></ul></li><li>默认交换机（管理交换机） vSwitch0</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h2&gt;&lt;h3 id=&quot;物理网卡&quot;&gt;&lt;a href=&quot;#物理网卡&quot; class=&quot;headerlink&quot; title=&quot;物理网卡&quot;&gt;&lt;/a&gt;物理网卡&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wireguard 介绍</title>
    <link href="http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-17T01:49:09.000Z</published>
    <updated>2023-11-20T09:41:01.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WireGuard-简介"><a href="#WireGuard-简介" class="headerlink" title="WireGuard 简介"></a>WireGuard 简介</h2><ul><li>Wireguard 是一个安全的网络通道<ul><li>wireguard是一种VPN协议</li></ul></li><li>wireguard 工作在第三层<ul><li>工作在X层代表可以解析第X层的数据包。</li><li>比如交换机是工作在第二层的设备，是指其可以解析第二层的以太帧帧头；路由器是工作第三层的设备是指其可以解析第三层的IP包包头），</li><li>其可以解析数据包的源目的IP。</li></ul></li><li>实现形式为linux内核中的一个虚拟网络网卡(注：实际上目前Wireguard协议不仅仅是linux内核实现，还有golang实现)</li><li>只需要一轮交互就可以完成密钥交换</li></ul><h2 id="路由最长匹配原则-静态路由表-和-默认路由"><a href="#路由最长匹配原则-静态路由表-和-默认路由" class="headerlink" title="路由最长匹配原则(静态路由表) 和 默认路由"></a>路由最长匹配原则(静态路由表) 和 默认路由</h2><h3 id="静态路由表"><a href="#静态路由表" class="headerlink" title="静态路由表"></a>静态路由表</h3><p><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_150923.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. NETworK:目的地址/前缀长度</span><br><span class="line">2. Mask: 掩码</span><br><span class="line">3. Next Hop: 下一跳</span><br></pre></td></tr></table></figure><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><ol><li>路由器收到分组，解包取出目的ip地址；</li></ol></li><li><ol start="2"><li>在路由表中匹配表项：目的ip地址和路由表项中的Mask掩码相与，用得到的网络地址和Network比较；</li></ol><ul><li>找到相同的，继续查找，根据最长匹配原则获取匹配长度最长的路由项。最后按最优的路由表项的Next Hop进行转发；</li><li>找不到相同的，有默认路由按默认路由的Next Hop进行转发；若没有默认路由，弃帧；</li></ul></li></ul><h3 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h3><ul><li>默认路由表项的Network和Mask 都是0.0.0.0</li><li>当普通静态路由表项没有匹配的表项，路由器就会选择默认路由<ul><li><ol><li>Mask0.0.0.0和收到分组的目的ip地址相与，得到的网络地址就是0.0.0.0，和默认路由表项的Network相同，也是匹配的；</li></ol></li><li><ol start="2"><li>Network0.0.0.0相当于是最短的前缀。普通静态路由表项的前缀一定比默认路由表项的前缀长，那么如果普通路由表项能匹配，必定不需要选择默认路由表项，这也是符合路由最长匹配原则。</li></ol></li></ul></li></ul><h2 id="wireguard-路由详解"><a href="#wireguard-路由详解" class="headerlink" title="wireguard 路由详解"></a>wireguard 路由详解</h2><h3 id="main-路由表"><a href="#main-路由表" class="headerlink" title="main 路由表"></a>main 路由表</h3><ul><li><p><code>ip route</code> 查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default via 192.168.100.254 dev eth0 proto dhcp src 192.168.100.63 metric 100 </span><br><span class="line">192.168.100.0/24 dev eth0 proto kernel scope link src 192.168.100.63 </span><br><span class="line">192.168.100.254 dev eth0 proto dhcp scope link src 192.168.100.63 metric 100</span><br></pre></td></tr></table></figure><blockquote><p>第一条：表示 默认路由规则。任何目标不在本地子网（局域网）内的数据包将通过 eth0 网络接口发送到网关 192.168.100.254，该网关是通过 DHCP 协议获取的。源IP地址将被设置为 192.168.100.63。度量值 100 表示这是一个比较优先的路由规则。<br>第二条：表示 <strong>本地子网路由规则</strong>。表示 192.168.100.0&#x2F;24 网段是直接连接到 eth0 网络接口的本地子网。这是一个由内核自动生成的本地链路路由规则，用于直接通信到本地子网，无需经过网关。</p></blockquote></li><li><p><code>scope link</code> 表示本地子网范围 </p><blockquote><p>第三条：表示 网关路由规则。指定了网关 192.168.100.254 是通过 DHCP 协议获取的，并且它是通过 eth0 网络接口连接的。与默认路由规则相比，这个规则更加详细，它是一个到网关的直接链路路由规则。度量值 100 表示这是一个比较优先的路由规则。</p></blockquote></li><li><p>从路由表中可以看出，所有的流量都是从物理网卡出去的，并没有通过WireGuard虚拟网络接口。</p></li></ul><h4 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h4><ul><li><p>从linux2.2的版本开始，内核中就有多个路由表，并且还有一套规则，这套规则告诉内核 <strong>这套规则会告诉内核如何为每个数据包选择正确的路由表。</strong></p></li><li><p>执行 <code>ip route</code>时，看到的是特定的路由表main。除了main之外还有其他的路由表存在。路由表一般用整数来标识，也可以通过文本对其命名，这些命名都保存在文件 &#x2F;etc&#x2F;iproute2&#x2F;rt_tables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/iproute2/rt_tables</span><br><span class="line">#</span><br><span class="line"># reserved values</span><br><span class="line">#</span><br><span class="line">255     local</span><br><span class="line">254     main</span><br><span class="line">253     default</span><br><span class="line">0       unspec</span><br><span class="line">#</span><br><span class="line"># local</span><br><span class="line">#</span><br><span class="line">#1      inr.ruhep</span><br></pre></td></tr></table></figure></li><li><p>linux 系统中，可以自定义从 <code>1-252</code>个路由表。linux系统默认维护了4个路由表：</p><ul><li>0: 系统保留表</li><li>253：default table. 没特别指定的默认路由都放在该表。</li><li>254：main table. 没指明路由表的所有路由放在该表。</li><li>255：local table. 保存本地接口地址，广播地址，NAT地址，由系统维护，用户不得更改。</li></ul></li><li><p>路由表的查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show table table_number</span><br><span class="line"> </span><br><span class="line">$ ip route show table table_name</span><br></pre></td></tr></table></figure><blockquote><p>路由表决定 <strong>如何传输数据包</strong><br>iptables决定 <strong>是否传输数据包</strong></p></blockquote></li></ul><h3 id="路由策略"><a href="#路由策略" class="headerlink" title="路由策略"></a>路由策略</h3><ul><li><p>内核是如何知道哪个数据包应该使用哪个路由表呢？</p></li><li><p>系统中有一套规则会告诉内核如何为每个数据包选择正确的路由表，这套规则就是路由策略数据库。这个数据库由 ip rule 命令来管理，如果不加任何参数，将会打印所有的路由规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:      from all lookup local</span><br><span class="line">32766:  from all lookup main</span><br><span class="line">32767:  from all lookup default</span><br></pre></td></tr></table></figure></li><li><p>左边的数字（0,32764,…..）表示规则的优先级：</p><ul><li><strong>数值越小的规则，优先级越高</strong></li><li>数值较小的规则会被优先处理。<blockquote><p>“路由规则的数值范围: 1~2^23−1”</p></blockquote></li></ul></li><li><p>除了优先级外，每个规则还有一个选择器(selector)和对应的执行策略(action).</p><ul><li>选择器会判断<strong>该规则是否适用于当前的数据包</strong>，如果适用，就执行对应的策略。最常见的执行策略就是查询一个特定的路由表（参考上一节内容）。如果该路由表包含了当前数据包的路由，那么就执行该路由；<strong>否则就会跳过当前路由表，继续匹配下一个路由规则。</strong></li></ul></li><li><p>在 Linux 系统启动时，内核会为路由策略数据库配置三条缺省的规则：</p><ul><li>0：匹配任何条件，查询路由表 local (ID 255)，该表 local 是一个特殊的路由表，包含对于本地和广播地址的优先级控制路由。rule 0 非常特殊，不能被删除或者覆盖。</li><li>32766：匹配任何条件，查询路由表 main (ID 254)，该表是一个常规的表，包含所有的无策略路由。系统管理员可以删除或者使用另外的规则覆盖这条规则。</li><li>32767：匹配任何条件，查询路由表 default (ID 253)，该表是一个空表，它是后续处理保留。对于前面的策略没有匹配到的数据包，系统使用这个策略进行处理，这个规则也可以删除。</li></ul></li><li><p>在默认情况下进行路由时，首先会根据规则 0 在本地路由表里寻找路由，如果目的地址是本网络，或是广播地址的话，在这里就可以找到合适的路由；如果路由失败，就会匹配下一个不空的规则，在这里只有 32766 规则，在这里将会在主路由表里寻找路由；如果失败，就会匹配 32767 规则，即寻找默认路由表。如果失败，路由将失败。从这里可以看出，策略性路由是往前兼容的。</p></li></ul><h3 id="WireGuard-全局路由策略"><a href="#WireGuard-全局路由策略" class="headerlink" title="WireGuard 全局路由策略"></a>WireGuard 全局路由策略</h3><ul><li>本质：添加了新的规则和表来实现特定路由（wg0出去，修改数据包（iptables））</li><li>wg-quick 这种做法的巧妙之处在于，它不会扰乱你的主路由表，而是通过规则匹配新创建的路由表。断开连接时只需删除这两条路由规则，默认路由就会被重新激活。</li></ul><blockquote><p><a href="https://cloud.tencent.com/developer/article/2153889">参考</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WireGuard-简介&quot;&gt;&lt;a href=&quot;#WireGuard-简介&quot; class=&quot;headerlink&quot; title=&quot;WireGuard 简介&quot;&gt;&lt;/a&gt;WireGuard 简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Wireguard 是一个安全的网络通道&lt;ul&gt;</summary>
      
    
    
    
    
    <category term="wireguard,VPN" scheme="http://example.com/tags/wireguard-VPN/"/>
    
  </entry>
  
  <entry>
    <title>博客介绍</title>
    <link href="http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-16T07:49:45.000Z</published>
    <updated>2023-11-17T01:41:53.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到-你的名字-的个人知识博客！"><a href="#欢迎来到-你的名字-的个人知识博客！" class="headerlink" title="欢迎来到 [你的名字] 的个人知识博客！"></a>欢迎来到 [你的名字] 的个人知识博客！</h1><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>嗨，大家好！我是Fisher JJ，一个对计算机充满热情的人。通过这个博客，我希望与大家分享我的学习和思考，探讨 计算机领域的各种话题。</p><h2 id="为什么我要写这个博客？"><a href="#为什么我要写这个博客？" class="headerlink" title="为什么我要写这个博客？"></a>为什么我要写这个博客？</h2><p>我创建这个博客的初衷是为了建立一个记录自己学习的平台。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欢迎来到-你的名字-的个人知识博客！&quot;&gt;&lt;a href=&quot;#欢迎来到-你的名字-的个人知识博客！&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到 [你的名字] 的个人知识博客！&quot;&gt;&lt;/a&gt;欢迎来到 [你的名字] 的个人知识博客！&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="个人介绍" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/11/15/hello-world/"/>
    <id>http://example.com/2023/11/15/hello-world/</id>
    <published>2023-11-15T06:14:34.102Z</published>
    <updated>2023-11-15T07:08:22.737Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
