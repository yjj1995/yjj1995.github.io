<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Fisher JJ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-15T08:04:50.751Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fisher JJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PCIE速率</title>
    <link href="http://example.com/2023/12/15/PCIE%E9%80%9F%E7%8E%87/"/>
    <id>http://example.com/2023/12/15/PCIE%E9%80%9F%E7%8E%87/</id>
    <published>2023-12-15T08:03:13.000Z</published>
    <updated>2023-12-15T08:04:50.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PCIE的规格一般有 PCIE2.0&#x2F;PCIE3.0&#x2F;PCIE4.0&#x2F;PCIE5.0</p></blockquote><h3 id="PCIE-相关概念"><a href="#PCIE-相关概念" class="headerlink" title="PCIE 相关概念"></a>PCIE 相关概念</h3><ul><li>传输速率为每秒传输量GT&#x2F;s, 而不是每秒位数Gbps, 因为传输率包括不提供额外吞吐量的开销位；比如PCIe 1.x 和 PCIe 2.x 使用8b&#x2F;10b 编码方案。导致占用了20%（2&#x2F;10）的原始信道带宽。</li><li>GT&#x2F;s ——Giga transation per second （千兆传输&#x2F;秒），即每一秒内传输的次数。重点在于描述物理层通信协议的速率属性，可以不和链路宽度等关联。</li><li>Gbps —— Giga Bits Per Second （千兆位&#x2F;秒）。原始速率</li><li>GT&#x2F;s 与Gbps 之间不存在成比例的换算关系。有效的带宽（乘以了比例）<br><img src="/../images/PCIE%E9%80%9F%E7%8E%87_160441.png"></li></ul><h3 id="PCIE带宽计算"><a href="#PCIE带宽计算" class="headerlink" title="PCIE带宽计算"></a>PCIE带宽计算</h3><ul><li>PCIe 吞吐量（可用带宽）计算方法：吞吐量 &#x3D; 传输速率 *  编码方案<ul><li>GT(Gigatransfer) x Lane的数量 x 编码方案效率</li><li>PCI-e2.0 协议支持 5.0 GT&#x2F;s，即每一条Lane 上支持每秒钟内传输 5G个Bit；但这并不意味着 PCIe 2.0协议的每一条Lane支持 5Gbps 的速率。为什么这么说呢？因为PCIe 2.0 的物理层协议中使用的是8b&#x2F;10b的编码方案。 即每传输8个Bit，需要发送10个Bit；这多出的2个Bit并不是对上层有意义的信息。那么， PCIe 2.0协议的每一条Lane支持 5 * 8 &#x2F; 10 &#x3D; 4 Gbps &#x3D; 500 MB&#x2F;s 的速率。以一个PCIe 2.0 x8的通道为例，x8的可用带宽为 4 * 8 &#x3D; 32 Gbps &#x3D; 4 GB&#x2F;s。同理，PCI-e3.0 协议支持 8.0 GT&#x2F;s, 即每一条Lane 上支持每秒钟内传输 8G个Bit。而PCIe 3.0 的物理层协议中使用的是 128b&#x2F;130b 的编码方案。 即每传输128个Bit，需要发送130个Bit。那么， PCIe 3.0协议的每一条Lane支持 8 * 128 &#x2F; 130 &#x3D; 7.877 Gbps &#x3D; 984.6 MB&#x2F;s 的速率。一个PCIe 3.0 x16的通道，x16 的可用带宽为7.877* 16 &#x3D; 126.031Gbps &#x3D; 15.754 GB&#x2F;s。<ul><li>PCIE速率<br><img src="/../images/PCIE%E9%80%9F%E7%8E%87_160449.png"></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;PCIE的规格一般有 PCIE2.0&amp;#x2F;PCIE3.0&amp;#x2F;PCIE4.0&amp;#x2F;PCIE5.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;PCIE-相关概念&quot;&gt;&lt;a href=&quot;#PCIE-相关概念&quot; class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nfs服务用户身份映射</title>
    <link href="http://example.com/2023/12/14/nfs%E6%9C%8D%E5%8A%A1%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%98%A0%E5%B0%84/"/>
    <id>http://example.com/2023/12/14/nfs%E6%9C%8D%E5%8A%A1%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%98%A0%E5%B0%84/</id>
    <published>2023-12-14T05:42:26.000Z</published>
    <updated>2023-12-14T07:22:20.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NFS-介绍"><a href="#NFS-介绍" class="headerlink" title="NFS 介绍"></a>NFS 介绍</h2><ul><li>NFS（network file system, 网络文件系统）是一种广泛的文件共享服务（企业内部网络），主要用于linux以及类unix系统之间的文件共享。</li><li>采用C&#x2F;S工作模式。在nfs服务器上将某个目录设置为共享目录，客户端可以将这个目录挂载到本地。</li><li>NFS服务本身比较简单，尤其是在权限设置方面功能比较弱。</li></ul><h3 id="用户身份映射"><a href="#用户身份映射" class="headerlink" title="用户身份映射"></a>用户身份映射</h3><ul><li>NFS服务本身并不具备身份验证功能，<strong>仅支持基于客户端IP进行认证</strong>。</li><li>我们在对NFS服务进行权限设置时，不能针对用户来分配权限，而只能针对客户端IP进行权限分配。（指的是客户端的用户，如果是truenas，则可以利用目录的权限来控制）</li><li><strong>要实现对共享目录的写入操作，必须要保证在NFS服务和操作系统两个层面全部都具有写入权限才可以。如何使得客户端可以在操作系统层面对共享目录具有写入权限，这就要涉及到用户身份映射问题。</strong></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li><p>nfs提供了一种身份映射的机制来对用户身份进行管理。</p></li><li><p>当客户端访问nfs服务时，服务器会根据情况将客户端用户的身份映射成nfs匿名用户nfsnobody。<strong>nfsnobody是由nfs服务在系统中自动创建的一个程序用户账号</strong>，该用户不能用于登录系统，专门用作nfs服务的匿名用户账号。</p></li><li><p>用户身份映射：</p><ul><li><p>指的是当客户端访问nfs服务器时，会自动被视为服务器中的nfsnobody，并按照该用户的权限去执行操作。</p></li><li><p>但不是所有的客户端都会被映射为nfsnobody用户，在&#x2F;etc&#x2F;exports配置文件中提供了以下选项，来决定是否将nfs客户端映射为nfsnobody用户：</p><ul><li>root_squash, 当nfs客户端以root用户身份访问时，映射为nfs服务器的nfsnobody用户。（可以设置truenas中的maproot设置）</li><li>no_root_squash, 当nfs客户端以root身份访问时，映射为nfs服务器的root用户，也就是要为超级用户保留权限。这个选项会留下严重的安全隐患，一般不建议采用。</li><li>all_squash，无论NFS客户端以哪种用户身份访问，均映射为NFS服务器的nfsnobody用户。</li></ul></li><li><p>其中默认值<strong>是root_squash，即当客户端以root用户的身份访问NFS共享时，在服务器端会自动被映射为匿名账号nfsnobody。</strong></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NFS-介绍&quot;&gt;&lt;a href=&quot;#NFS-介绍&quot; class=&quot;headerlink&quot; title=&quot;NFS 介绍&quot;&gt;&lt;/a&gt;NFS 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NFS（network file system, 网络文件系统）是一种广泛的文件共享服务（企业内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>时序数据库</title>
    <link href="http://example.com/2023/12/05/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2023/12/05/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2023-12-05T09:28:39.000Z</published>
    <updated>2023-12-11T01:53:39.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时序数据库"><a href="#时序数据库" class="headerlink" title="时序数据库"></a>时序数据库</h2><h3 id="时序数据库中存储的时序数据"><a href="#时序数据库中存储的时序数据" class="headerlink" title="时序数据库中存储的时序数据"></a>时序数据库中存储的时序数据</h3><ul><li><p><strong>每条数据都会带有时间戳属性。</strong></p></li><li><p>采集时序数据的目的是监测数据的前后差异，然后做出响应。</p></li><li><p>时序数据库就是把时间作为一个默认纬度罢了 一般靠谱点的话也应该以时间纬度来设计存储引擎</p></li><li><p>如果数据采集频率少，数据量不大的话，使用关系&#x2F;非关系型数据库代替时序数据库是完全没有问题的。</p></li></ul><h2 id="TDengine"><a href="#TDengine" class="headerlink" title="TDengine"></a>TDengine</h2><ul><li>TDengine是一个高效的存储、查询、分析时序大数据的平台，专为物联网、车联网、工业互联网、运维监测等优化而设计。可以像<strong>使用关系型数据库MySQL</strong>一样来使用它，简单又方便。</li><li>TDengine迅速定位了自己要做的产品，那就是物联网大数据平台，要把时序数据库、缓存、消息订阅、流式计算等系列功能融合在一起，一站式的解决物联网大数据问题，这样才能将系统研发、维护的复杂度与成本大幅降低。</li></ul><h3 id="物联网数据特点"><a href="#物联网数据特点" class="headerlink" title="物联网数据特点"></a>物联网数据特点</h3><ul><li>数据是时序的，一定带有时间戳。</li><li><strong>数据是结构化的</strong></li><li>数据极少有更新或删除操作</li><li>相对互联网应用，写多读少</li><li>用户关注的是一段时间的趋势，而不是某一特点时间点的值</li><li>数据是有保留期限的</li><li>数据的查询分析一定是基于时间段和地理区域的。</li><li>除存储查询外，还往往需要各种统计和实时计算操作</li><li>流量平稳，可以预测</li><li>往往需要插值等一些特殊的计算</li><li>数据量巨大，一天采集的数据就可以100亿条</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>物联网数据的冷热程度是时间决定的，刚采集的数据是最热的，而不是用户点击决定。</li><li>数据是时序的，时间戳自然可以作为主键，根本不需要复杂的索引结构</li></ul><h3 id="TDengine的特点"><a href="#TDengine的特点" class="headerlink" title="TDengine的特点"></a>TDengine的特点</h3><ul><li>专为物联网数据而设计，利用物联网数据时序性的特点，实现每个采集点对应一个表的这一功能。但其不适用于处理通用的互联网数据。</li><li>采用列式存储+压缩的方式，以节省硬件成本。(压缩效率高：利用物联网数据变化波动不大的特性、dif插值后压缩，然后二阶压缩，效率很高。)</li><li>支持高可用性，将每个物理节点划分为多个虚拟数据节点和虚拟管理节点。虚拟数据节点存储数据，虚拟管理节点管理MetaData。虚拟数据节点和虚拟管理节点分布在不同的物理节点上实现数据集应用的高可用。</li><li>存储结构上，采用每个采集点创建一个独立的表的方式来存储。这样实现每个采集点的数据的连续存放，提升读取效率。由于每个表的数据来源只有一个，能够实现无锁写入，提升写入速率。</li><li>针对多变的聚合，引入了超级表的概念。同一类型的采集设备可以创建一张超级表。在创建超级表时，可以对这类表指定标签，在查询的时候通过标签来对数据库中的表进行过滤，这样即使数据库中有非常多的表，也可以实现快速的多表聚合。</li><li>安装包非常小，安装使用简单。支持SQL，语法与MySQL类似。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;时序数据库&quot;&gt;&lt;a href=&quot;#时序数据库&quot; class=&quot;headerlink&quot; title=&quot;时序数据库&quot;&gt;&lt;/a&gt;时序数据库&lt;/h2&gt;&lt;h3 id=&quot;时序数据库中存储的时序数据&quot;&gt;&lt;a href=&quot;#时序数据库中存储的时序数据&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rsync</title>
    <link href="http://example.com/2023/12/01/rsync/"/>
    <id>http://example.com/2023/12/01/rsync/</id>
    <published>2023-12-01T06:10:57.000Z</published>
    <updated>2023-12-01T08:51:48.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell-命令行同步"><a href="#shell-命令行同步" class="headerlink" title="shell 命令行同步"></a>shell 命令行同步</h2><h3 id="ssh-同步"><a href="#ssh-同步" class="headerlink" title="ssh 同步"></a>ssh 同步</h3><ul><li>push端需要安装 rsync 服务</li><li>接收端（服务端）只需要开启 ssh服务<br><img src="/../images/rsync_153738.png"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync -av -e &quot;ssh -p 22&quot; /mnt/tmp/ root@10.128.118.104:/mnt/tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="模组形式"><a href="#模组形式" class="headerlink" title="模组形式"></a>模组形式</h3><p><a href="https://www.cnblogs.com/jasondan/p/4040912.html">使用Rsync进行文件的同步与备份</a><br><a href="https://blog.csdn.net/scott_bing/article/details/79003688">Rsync数据同步及同步方式</a><br><img src="/../images/rsync_155349.png"></p><ul><li><p>需要在服务端配置conf文件</p><ul><li>一般位于 &#x2F;etc&#x2F;rsync.conf<br><img src="/../images/rsync_155521.png"><br>&#x2F;&#x2F; 一般加上 uid &#x3D;root<br>    gid &#x3D;root<br>    代表对同步目录的权限</li></ul></li><li><p>修改配置文件<br><code>rsync --daemon --config=/tmp/rsyncd.conf </code></p></li><li><p>推拉命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉文件</span><br><span class="line">rsync -av 10.128.118.229::test_bckup/ /tmp/a</span><br><span class="line"># 推文件</span><br><span class="line">rsync -av  /tmp/a/ 10.128.118.229::test_bckup/</span><br></pre></td></tr></table></figure></li></ul><h3 id="truenas-rsync-设置"><a href="#truenas-rsync-设置" class="headerlink" title="truenas rsync 设置"></a>truenas rsync 设置</h3><ul><li>架构<br><img src="/../images/rsync_163130.png"></li><li>truenas1 -&gt; (push) -&gt; truenas2</li></ul><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><ul><li><ol><li>添加模块<br><img src="/../images/rsync_164136.png"></li></ol><ul><li>如果873是虚拟机的端口，外部网络无法直接访问，则需要通过端口映射进行映射到公网。</li></ul></li><li><p>2.<br><img src="/../images/rsync_164530.png"><br><img src="/../images/rsync_164535.png"></p><ul><li>可以设置：<ul><li>a. 最大连接数</li><li>b. 允许IP（网段）</li><li>c. 禁止ip （网段）</li></ul></li></ul></li></ul><h5 id="增加访问密码"><a href="#增加访问密码" class="headerlink" title="增加访问密码"></a>增加访问密码</h5><ul><li>添加其他参数<br><img src="/../images/rsync_164621.png"></li><li>shell 创建密码文件<br><code>vim /etc/rsync.password</code></li><li>修改权限，只有用户有读写权限<br><code>chmod 600 /etc/rsync.password</code></li></ul><h4 id="客户端-增加任务"><a href="#客户端-增加任务" class="headerlink" title="客户端 增加任务"></a>客户端 增加任务</h4><p><img src="/../images/rsync_164835.png"><br><img src="/../images/rsync_164840.png"></p><ul><li>增加用户密码文件<br><code>vim /etc/rsync.password</code></li><li>设置密码文件的拥有者 和 权限<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /etc/rsync.password</span><br><span class="line"></span><br><span class="line">chown yujunjie:yujunjie /etc/rsync.password</span><br></pre></td></tr></table></figure></li></ul><h3 id="不配密码"><a href="#不配密码" class="headerlink" title="不配密码"></a>不配密码</h3><p><img src="/../images/rsync_165132.png"><br>&#x2F;&#x2F; 填 对该目录的 拥有者和 组就行<br><img src="/../images/rsync_165143.png"><br>&#x2F;&#x2F; 和 用户使用的密码文件 有关</p><p><a href="https://cloud.tencent.com/developer/article/1028311">Linux Rsync备份服务介绍及部署守护进程模式</a><br><a href="https://developer.aliyun.com/article/931870">超容易的rsync守护进程服务部署流程</a><br><a href="https://www.jianshu.com/p/b0157e4ab801">RSYNC备份服务</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shell-命令行同步&quot;&gt;&lt;a href=&quot;#shell-命令行同步&quot; class=&quot;headerlink&quot; title=&quot;shell 命令行同步&quot;&gt;&lt;/a&gt;shell 命令行同步&lt;/h2&gt;&lt;h3 id=&quot;ssh-同步&quot;&gt;&lt;a href=&quot;#ssh-同步&quot; cla</summary>
      
    
    
    
    
    <category term="true nas, rsync" scheme="http://example.com/tags/true-nas-rsync/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 配置</title>
    <link href="http://example.com/2023/11/29/ubuntu-%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/11/29/ubuntu-%E9%85%8D%E7%BD%AE/</id>
    <published>2023-11-29T08:57:27.000Z</published>
    <updated>2023-11-29T09:03:27.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu-SSH-Server"><a href="#Ubuntu-SSH-Server" class="headerlink" title="Ubuntu SSH Server"></a>Ubuntu SSH Server</h2><p><a href="https://blog.csdn.net/weixin_53000184/article/details/130783369">参考</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- 1. Ubuntu apt source configuration: </span><br><span class="line">root@ubuntu22:/mnt/nfs_dir# cat  /etc/apt/sources.list</span><br><span class="line">#deb cdrom:[Ubuntu 22.04.3 LTS _Jammy Jellyfish_ - Release amd64 (20230807.2)]/ jammy main restricted</span><br><span class="line"></span><br><span class="line"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class="line"># newer versions of the distribution.</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ jammy main restricted</span><br><span class="line"></span><br><span class="line">## Major bug fix updates produced after the final release of the</span><br><span class="line">## distribution.</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted</span><br><span class="line"># deb-src http://cn.archive.ubuntu.com/ubuntu/ jammy-updates main restricted</span><br><span class="line"></span><br><span class="line">- 2. Install openssh server:  apt install openssh-server </span><br><span class="line">- 3. Enable openssh </span><br><span class="line">root@ubuntu22:/mnt/nfs_dir# cat /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">#LoginGraceTime 2m</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">#StrictModes yes</span><br><span class="line">#MaxAuthTries 6</span><br><span class="line">#MaxSessions 10</span><br><span class="line"></span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">    </span><br><span class="line">- 4. Start ssh server: #service ssh  restart </span><br><span class="line">- 5. Nfs mount: </span><br><span class="line">apt install nfs-common</span><br><span class="line">mount -t nfs -o vers=4,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport  10.128.118.104:/mnt/FileDir/iso_nfs_dir /mnt/nfs_dir</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/ubuntu-%E9%85%8D%E7%BD%AE_170327.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Ubuntu-SSH-Server&quot;&gt;&lt;a href=&quot;#Ubuntu-SSH-Server&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu SSH Server&quot;&gt;&lt;/a&gt;Ubuntu SSH Server&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据中心网络架构</title>
    <link href="http://example.com/2023/11/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2023/11/27/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/</id>
    <published>2023-11-27T09:23:40.000Z</published>
    <updated>2023-12-15T06:11:18.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统数据中心网络架构"><a href="#传统数据中心网络架构" class="headerlink" title="传统数据中心网络架构"></a>传统数据中心网络架构</h2><ul><li><p>传统的大型数据中心，网络一般分为三层：分级的互联网络模型。</p><ul><li><p>Access Layer （接入层）：</p><ul><li>Edge Layer， 接入层交换机通常位于机架顶部，因此也被称为ToR (Top of Rack)交换机，它们物理连接服务器。</li></ul></li><li><p>Aggregation Layer （汇聚层）：</p><ul><li>Distribution Layer， 汇聚交换机连接Access交换机，同时提供其他的服务，例如防火墙，SSL offload，入侵检测，网络分析等。</li></ul></li><li><p>Core Layer (核心层)：</p><ul><li>核心交换机为进出数据中心的包提供高速的转发，为多个汇聚层提供连接性，核心交换机为通常为整个网络提供一个弹性的L3路由网络。</li></ul></li></ul></li><li><p>三层网络架构：<br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_094346.png"></p><ul><li><p>汇聚交换机是L2和L3网络的分界点，汇聚交换机以下的是L2网络，以上是L3网络。</p><ul><li>L2网络代表都是通过mac地址通信。不需要ip（可以视为一个交换机上）</li><li>L3网络代表的是通过ip通信，需要经过路由器的转发。（一般分为不同的子网（不同的ip段））</li></ul></li><li><p><strong>每组汇聚交换机</strong> 管理一个pod(Point of Delivery)（图中为两个汇聚层交换机）, 每个pod内都是独立的Vlan网络（VLAN（Virtual Local Area Network）即虚拟局域网）。</p></li><li><p>服务器在pod内迁移不必修改ip地址和默认网关。</p><ul><li>因为一个pod对应一个L2广播域。</li></ul></li><li><p>汇聚交换机和接入交换机之间通常使用STP（spanning tree protocol）.</p></li><li><p><strong>stp使得对于一个vlan网络只有一个汇聚层交换可用</strong>，其他汇聚层交换机在出现故障时才被使用。汇聚层是一个 active-passive的HA模式。因此汇聚层做不到水平扩展。</p></li></ul></li><li><p>大二层网络</p><ul><li><p>随着云计算的发展，计算资源被池化，为了使得 <strong>计算资源</strong> 可以任意分配，需要一个大二层的的 网络架构。</p></li><li><p>整个数据中心网络都是一个L2广播域，服务器可以任意地点创建，迁移，而不需要对IP地址或者默认网关做修改。</p></li><li><p>大二层网络架构，L2&#x2F;L3分界在核心交换机。</p><ul><li>核心交换机以下了，整个数据中心都是L2网络。（当然，可以包含多个VLAN，VLAN之间通过核心交换机做路由进行连通）</li><li>也就是全部可以只用mac地址就可以进行互通<br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_112046.png"></li></ul></li><li><p>大二层网络架构虽然使得虚机网络能够灵活创建，但是带来的问题也是明显的。共享的L2广播域带来的BUM（Broadcast·，Unknown Unicast，Multicast）风暴随着网络规模的增加而明显增加，最终将影响正常的网络流量。</p></li><li><p>大二层网络更像一种逻辑上的概念，表示将原来的不同的地域的vlan变成一个vlan，实现二层上相同，便于虚拟机的大范围迁移</p><ul><li>主要技术有<ul><li><ol><li>网卡设备虚拟化技术（逻辑上合并成一个节点，聚合）</li></ol><ul><li>堆叠技术（框盒），网络规模小，不兼容</li></ul></li><li><ol start="2"><li>路由转发技术（封装包，增加包头）</li></ol><ul><li>参考三层逻辑破环技术</li><li>新技术，需要新设备</li></ul></li><li><ol start="3"><li>vxlan nvgre (隧道封装)</li></ol><ul><li>虚拟机了一个大型的交换机</li><li>支持sdn</li><li>运维相对于复杂</li></ul></li></ul></li></ul></li></ul></li><li><p><a href="https://www.zhihu.com/question/312012730/answer/692082210">如何理解大二层网络？ - 肖宏辉的回答 - 知乎</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/598278560">大二层网络概述</a></p></li></ul><h3 id="技术发展对网络架构的影响"><a href="#技术发展对网络架构的影响" class="headerlink" title="技术发展对网络架构的影响"></a>技术发展对网络架构的影响</h3><ul><li>数据中心是为了数据服务。随着技术的发展，数据的内容和形式也发生了变化。<ul><li>虚拟化的流行。传统的数据中心中，服务器的利用率并不高，采用三层网络架构配合一定的超占比（oversubscription），能够有效的共享利用核心交换机和一些其他网络设备的性能。但是虚拟化的流行使得服务器的利用率变高，一个物理服务器可以虚拟出多个虚拟机，分别运行各自的任务，走自己的网络路径。因此，高的服务器利用率要求更小的超占比。Gartner的一份报告：Forecast: x86 Server Virtualization, Worldwide, 2012-2018, 2014 Update指出，在2018年，82%的服务器将是虚拟服务器。虚拟化对数据中心网络架构的影响是巨大的。</li><li>软件架构的解耦。传统的软件架构，采用专用模式进行部署，软件系统通常跑在一个物理服务器，与其他的系统做物理隔离。但是，模块化，分层的软件架构设计已经成为了现在的主流。一个系统的多个组件通常分布在多个虚机&#x2F;容器中。最典型的就是三层WEB应用，包含了Client&#x2F;Application&#x2F;DB。一次请求，不再是由一个虚机&#x2F;物理机完成，而是由多个服务器协同完成。这对网络的影响是，东西向流量变多了。</li><li>新的应用的兴起。传统数据中心是为.com应用设计的，这些流量大多是客户端和服务器之间的通信。而分布式计算，大数据渐渐兴起，这些应用会在数据中心的服务器之间产生大量的流量。例如Hadoop，将数据分布在数据中心中成百上千个服务器中，进行并行计算。据说Facebook的一个Hadoop集群有着超过100 petabytes的数据。可见对于某些应用，数据中心的东西向流量是巨大的。</li><li>软件定义数据中心（SDDC，Software Defined Data Center）的提出。SDDC提出软件定义的数据中心，这要求数据中心的计算存储网络都是可以软件定义的。对应于网络，就是SDN。传统的三层网络架构在设计之初并没有考虑SDN。</li></ul></li><li>总结起来，<strong>技术发展要求新的数据中心有更小的超占比，甚至没有超占比；更高的东西向流量带宽；支持SDN。</strong> （件定义网络（SDN））</li></ul><h4 id="流量走向"><a href="#流量走向" class="headerlink" title="流量走向"></a>流量走向</h4><ul><li><p>数据中心的流量总的来说可以分为以下几种：</p><ul><li>南北向流量：数据中心之外的客户端到数据中心服务器之间的流量，或者数据中心服务器访问互联网的流量。</li><li>东西向流量：数据中心内的服务器之间的流量。</li><li>跨数据中心流量：跨数据中心的流量，例如数据中心之间的灾备，私有云和公有云之间的通讯。</li></ul></li><li><p>传统三层架构下的东西向流量</p><ul><li>东西向流量分为L2和L3流量。<ul><li>东西向的L2流量，如果源和目的主机都在同一个接入层交换机下，那么可以达到全速，因为接入交换机就能完成转发。</li><li>如果需要跨机架，但仍然是在一个汇聚层POD内，则需要通过汇聚层交换机进行转发，带宽取决于汇聚层交换机的转发速率，端口带宽和同时有多少个接入层交换机共享汇聚层交换机。前面说过汇聚层和接入层之间一般使用STP，这使得一个汇聚层POD只能有一个汇聚层交换机在工作。为了满足跨机架的L2转发，汇聚层交换机的性能，例如带宽，转发速率必然要大于接入层交换机。</li><li>如果L2流量需要跨汇聚层POD（大二层架构），那必须经过核心交换机。同样的问题仍然存在，对核心交换机的要求会更高。（核心层以下都是L2）</li><li>东西向的L3流量，不论是不是在一个接入层交换机下，都需要走到具有L3功能的核心交换机才能完成转发。如下图所示：</li></ul></li></ul></li></ul><h2 id="Clos-网络架构"><a href="#Clos-网络架构" class="headerlink" title="Clos 网络架构"></a>Clos 网络架构</h2><ul><li><p>简单的clos架构是一个三级互连架构，包含了输入级，中间级，输出级，<br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_134838.png"></p></li><li><p>Clos架构的核心思想是：用多个小规模、低成本的单元构建复杂，大规模的架构。上图中，m是每个子模块的输入端口数，n是每个子模块的输出端口数，r是每一级的子模块数，经过合理的重排，只要满足r2≥max(m1,n3)，那么，对于任意的输入到输出，总是能找到一条无阻塞的通路。</p></li><li><p>现在流行的Clos网络架构是一个二层的spine&#x2F;leaf架构。</p></li></ul><h3 id="spine-leaf-网络"><a href="#spine-leaf-网络" class="headerlink" title="spine-leaf 网络"></a>spine-leaf 网络</h3><ul><li><p>更好的实现了大二层网络，和较强的网络拓展能力<br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_132108.png"><br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_135238.png"></p></li><li><p>spine交换机之间或者leaf交换机之间不需要链接同步数据（不像三层网络架构中的汇聚层交换机之间需要同步数据）。</p></li><li><p><strong>每个leaf交换机的上行链路等于spine交换机数量，同样的每个spine交换机的下行链路数等于leaf交换机的数量</strong></p></li><li><p>spine交换机和leaf交换机是以full-mesh方式连接。</p></li><li><p>三级Clos架构沿着中间层对折，就得到了二层spine&#x2F;leaf网络架构。由于这种网络架构来源于交换机内部的Switch Fabric，因此这种网络架构也被称为Fabric网络架构。</p></li><li><p>Spine&#x2F;Leaf网络架构中，L2&#x2F;L3的分隔通常在Leaf交换机。也就是说每个Leaf交换机下面都是个独立的L2广播域。<strong>如果说两个Leaf交换机下的服务器需要通讯，需要通过L3路由，经由Spine交换机转发。</strong></p></li><li><p>leaf switch</p><ul><li>相当于传统三层架构中的接入交换机，作为TOR（Top Of Rack）直接连接物理服务器。与接入交换机的区别在于，<strong>L2&#x2F;L3网络的分界点现在在leaf交换机上了。leaf交换机之上是三层网络</strong></li></ul></li><li><p>spine switch</p><ul><li><p>相当于核心交换机。spine和leaf交换机之间通过ECMP（Equal Cost Multi Path）动态选择多条路径。区别在于，spine交换机现在只是为leaf交换机提供一个弹性的L3路由网络，<strong>数据中心的南北流量可以不用直接从spine交换机发出，一般来说，南北流量可以从与leaf交换机并行的交换机（edge switch）再接到WAN router出去。</strong><br><img src="/../images/%E5%8F%B6%E8%84%8A%E7%BD%91%E7%BB%9C_140555.png"></p></li><li><p>与传统三层网络架构类似，这样的设计，能分隔L2广播域，适用的网络规模更大。但是对应的问题就是，服务器的部署不能在数据中心的任意位置。传统的三层网络架构是垂直的结构，而spine&#x2F;leaf网络架构是扁平的结构，从结构上看，spine&#x2F;leaf架构更易于水平扩展。(需要结合overlay等技术)</p></li></ul></li><li><p>一个叶脊拓扑网络主机可以通过叶支交换机（leaf）和另一个叶支交换机上的主机进行通信，而且是独立的通道。这种叶脊拓扑网络可以大大提高网络的效率，特别是高性能计算集群或高频流量通信设备。</p></li><li><p><strong>叶脊拓扑网络结构提供了解决横向网络连接的传输瓶颈，而且叶脊拓扑网络提供了高度的扩展性，叶脊拓扑网络几乎能适应所有大中小型数据中心。</strong></p></li><li><p>叶脊拓扑网络不是完美的。其中一个缺点就是，叶脊拓扑网络交换机的增多使得网络规模变大。叶脊拓扑网络的数据中心需要按客户端的数量，叶脊拓扑网络相应比例的增加交换机和网络设备。随着主机的增加，需要大量的叶交换机（leaf）上行连接到脊交换机（spine）。</p></li></ul><blockquote><p>参考</p><p><a href="https://www.cnblogs.com/nihaizong/p/9261104.html">数据中心网络架构浅谈</a></p><p><a href="https://www.infoobs.com/article/20190304/30663.html">一文读懂数据中心为啥需要大二层网络</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;传统数据中心网络架构&quot;&gt;&lt;a href=&quot;#传统数据中心网络架构&quot; class=&quot;headerlink&quot; title=&quot;传统数据中心网络架构&quot;&gt;&lt;/a&gt;传统数据中心网络架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传统的大型数据中心，网络一般分为三层：分级的互联网络模型。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ESXI</title>
    <link href="http://example.com/2023/11/22/ESXI/"/>
    <id>http://example.com/2023/11/22/ESXI/</id>
    <published>2023-11-22T08:45:52.000Z</published>
    <updated>2023-11-29T10:47:16.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VMware-vSphere网络、vSwitch、端口组"><a href="#VMware-vSphere网络、vSwitch、端口组" class="headerlink" title="VMware vSphere网络、vSwitch、端口组"></a>VMware vSphere网络、vSwitch、端口组</h2><h3 id="ESXI-网络"><a href="#ESXI-网络" class="headerlink" title="ESXI 网络"></a>ESXI 网络</h3><ul><li><p>目的</p><ul><li>相互交流（想想 vMotion）</li><li>与 vCenter 通信（想想 HA）</li><li>与他们依赖的外部资源进行通信，例如存储阵列或 Active Directory</li><li>允许它们的常驻虚拟机与它们可能依赖的其他虚拟机和外部资源进行通信</li></ul></li><li><p>配置</p><ul><li>ESXI 主机上的虚拟交换机</li><li>虚拟交换机上的端口组</li></ul></li></ul><h3 id="ECXI主机上的虚拟交换机"><a href="#ECXI主机上的虚拟交换机" class="headerlink" title="ECXI主机上的虚拟交换机"></a>ECXI主机上的虚拟交换机</h3><ul><li><p>ESXI中的虚拟交换机都是三层交换机</p><ul><li>三层交换机能实现不同网段的服务器之间的通信。</li></ul></li><li><p>三层交换机中：</p><ul><li>端口也有2层端口 和 三层端口之分。</li></ul></li><li><p>二层端口和三层端口区分：二层端口不能配置ip，三层端口可以配置ip</p></li><li><p>默认虚拟交换机的端口都是 <strong>二层端口</strong>。</p></li><li><p>将 ESXi 主机上的虚拟交换机视为您之前可能遇到的任何其他交换机，当涉及到网络层时，ESXi 中的虚拟交换机是为我们的 ESXi 主机提供连接、冗余和负载平衡的方式。</p></li><li><p>有两种类型的开关，尽管您可能会听到它们各自使用几个不同的名称。</p><ul><li>vSphere 标准交换机</li><li>vSphere 分布式交换机（需要vSphere Enterprise Plus 许可）</li></ul></li></ul><h4 id="vSphere-标准交换机-标准-vSwitch-vSwitch"><a href="#vSphere-标准交换机-标准-vSwitch-vSwitch" class="headerlink" title="vSphere 标准交换机 &#x2F; 标准 vSwitch&#x2F; vSwitch"></a>vSphere 标准交换机 &#x2F; 标准 vSwitch&#x2F; vSwitch</h4><ul><li>基本虚拟交换机。</li><li>标准 vSwitch 驻留在 ESXi 主机上，必须在每个主机上单独配置<ul><li>可以通过PowerCLI或主机配置文件简化配置</li></ul></li></ul><p><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_171510.png"></p><ul><li>网络交换机（物理）连接到ESXI主机中的 网卡（一般是指的是物理网卡）</li><li>ESXI主机中的 网卡（一般是指的是物理网卡）连接到ESXI中的虚拟交换机</li><li>ESXI可以有多个vSwitch.</li></ul><h4 id="vSphere-分布式交换机-分布式虚拟交换机-dvSwitch"><a href="#vSphere-分布式交换机-分布式虚拟交换机-dvSwitch" class="headerlink" title="vSphere 分布式交换机&#x2F;分布式虚拟交换机&#x2F;dvSwitch"></a>vSphere 分布式交换机&#x2F;分布式虚拟交换机&#x2F;dvSwitch</h4><ul><li>标准虚拟交换机和分布式虚拟交换机之间没有太大区别。</li><li>仍然以冗余方式将 ESXi 主机中的网卡连接到网络交换机，改变的是虚拟层，以及 VMware vSphere 本身内的交换机。<br><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_172134.png"></li><li>交换机配置本身位于 vCenter 服务器而不是 ESXi 主机上</li><li>每个 ESXi 主机上都有分布式虚拟交换机配置的副本，正如您在每个主机上的亮蓝色交换机中看到的那样，这样，如果 vCenter 发生问题，我们的虚拟机就不会受到影响。<br><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_172242.png"></li><li>每个vmnic(ESXI主机的网卡)都连接到分布式虚拟交换机上的相应dvUplink端口。</li><li>通过cCenter 服务器管理分布式虚拟交换机<ul><li>分布式虚拟交换机配置在每个 ESXi 主机上的设计都是相同的。</li></ul></li><li>与标准 vSwitch 类似，可以使用 vSphere Client、PowerCLI 或主机配置文件管理分布式 vSwitch。这里的区别在于，您在 vCenter 服务器上配置单个分布式虚拟交换机，而不是 ESXi 主机上的单个虚拟交换机。</li></ul><blockquote><p>vSphere Distributed Switch 确实需要VMware Enterprise Plus 许可。</p></blockquote><h3 id="VMware-中的-NIC-成组策略"><a href="#VMware-中的-NIC-成组策略" class="headerlink" title="VMware 中的 NIC 成组策略"></a>VMware 中的 NIC 成组策略</h3><ul><li>多个物理网卡可以连接到虚拟交换机上形成冗余，实现负载均衡以及故障恢复。</li></ul><h3 id="虚拟交换机上的-端口组"><a href="#虚拟交换机上的-端口组" class="headerlink" title="虚拟交换机上的  端口组"></a>虚拟交换机上的  端口组</h3><p><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_113015.png"></p><ul><li>虚拟交换机上的一组虚拟端口（接口）</li><li>分类<ul><li>虚拟机端口组<ul><li>虚拟机端口组是我们连接虚拟机的方式。例如，我可能有一个带有单个 VLAN、多个 VLAN（VLAN 中继）的端口组，或者在分布式虚拟交换机的情况下是专用 VLAN。</li></ul></li><li>VMkernel 端口组</li></ul></li></ul><h4 id="VMkernel-端口组"><a href="#VMkernel-端口组" class="headerlink" title="VMkernel 端口组"></a>VMkernel 端口组</h4><ul><li>Management Network 端口组<ul><li>三层端口</li></ul></li><li>VMK端口不是提供给虚拟机使用的，只提供给ESXI服务器主机使用。<ul><li>vmk0就是ESXI的管理网络。</li></ul></li><li>VMkernel 端口用于 VMware vSphere 中的非虚拟机流量</li><li>每个 ESXi 主机都有一个 VMkernel 端口用于主机管理。<ul><li>如果它是 vSphere 集群的成员，它还将有一个用于 vMotion 的 VMkernel 端口。</li><li>如果群集是 vSAN 群集，则将有一个用于 vSAN 的 VMkernel 端口。</li><li>网络存储服务，容错都有vmkernel端口</li></ul></li><li>每个 VMkernel 端口都有自己唯一的 IP 地址，您还可以更改 VMkernel 端口上的默认 MTU 1500。</li><li>端口组的作用是可以想象成虚拟交换机的下行端口，所以才能针对不同的业务进行VLAN以及流量的控制，将各业务流量进行逻辑隔离。</li></ul><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><ul><li>同一网段下实现隔离。</li><li>划分不同的局域网</li><li>就是同一个交换机下，在二层（链路层）划分成若干个独立的部分（广播域）。</li><li>VLAN 模型，基于端口的 VLAN 划分（port-based）：</li></ul><h3 id="ACCESS接口"><a href="#ACCESS接口" class="headerlink" title="ACCESS接口"></a>ACCESS接口</h3><ul><li>交换机和PC之间连接需要用ACCESS接口。</li><li>如果一个接口划分给了某个vlan，并且这个接口一端连接了服务器（PC），那这个接口就是ACCESS接口，ACCESS接口属于2层接口，不可配置IP。</li><li>特点：进ACCESS接口需要打tag，出ACCESS接口需要剥离tag</li></ul><h2 id="ESXI-用户角色"><a href="#ESXI-用户角色" class="headerlink" title="ESXI 用户角色"></a>ESXI 用户角色</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>角色是一组预定义的特权（权限的组合）<ul><li>特权定义了执行操作和读取属性所需的权限。<ul><li>例如管理员的角色（拥有所有的权限）<ul><li>虚拟机管理员角色允许用户读取和更改虚拟机属性。</li></ul></li><li>访客的角色（只可读）</li></ul></li></ul></li><li>各种角色定义了对此角色可操作的细节的权限组合。</li><li>分配权限时，可将用户或组与角色配对，并且将该配对与清单对象关联。<ul><li>对于清单中的不同对象，单个用户或组可能有不同角色。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加角色 选择特权 </span><br><span class="line">// 特权解释</span><br><span class="line">TrustedAdmin（受信任的管理员）： 这可能是vSphere环境中角色或权限级别的一个表示，指示具有某些受信任特权的管理员。</span><br><span class="line"></span><br><span class="line">Global（全局）： 这可能指的是具有全局范围并影响整个vSphere环境的设置、配置或对象。</span><br><span class="line"></span><br><span class="line">Folder（文件夹）： 在vSphere中，文件夹是一种组织和分组相关对象（如虚拟机或主机）的方法。</span><br><span class="line"></span><br><span class="line">Datacenter（数据中心）： 表示vSphere环境中资源组（主机、集群、存储等）的逻辑容器。</span><br><span class="line"></span><br><span class="line">Datastore（数据存储）： 存储虚拟机文件和其他数据的存储位置。</span><br><span class="line"></span><br><span class="line">Network（网络）： 涉及虚拟化环境中的网络组件和配置。</span><br><span class="line"></span><br><span class="line">DVSwitch（分布式虚拟交换机）： 跨多个主机的虚拟交换机，提供vSphere环境中的集中网络管理。</span><br><span class="line"></span><br><span class="line">DVPortgroup（分布式虚拟端口组）： 分布式虚拟交换机上端口的逻辑分组。</span><br><span class="line"></span><br><span class="line">Host（主机）： 运行ESXi虚拟化程序的物理服务器，用于托管虚拟机。</span><br><span class="line"></span><br><span class="line">VirtualMachine（虚拟机）： 表示在主机上运行的操作系统的虚拟化实例。</span><br><span class="line"></span><br><span class="line">Resource（资源）： 通常是指vSphere环境中的计算资源，如CPU、内存和存储。</span><br><span class="line"></span><br><span class="line">Alarm（警报）： 用于监视特定事件或条件并基于预定义规则触发操作的机制。</span><br><span class="line"></span><br><span class="line">Task（任务）： 表示在vSphere对象上执行的特定操作或操作。</span><br><span class="line"></span><br><span class="line">ScheduledTask（定时任务）： 预定在特定时间或定期运行的任务。</span><br><span class="line"></span><br><span class="line">Sessions（会话）： 表示vSphere环境中的用户会话。</span><br><span class="line"></span><br><span class="line">Performance（性能）： 涉及监控和管理vSphere环境中各个组件的性能。</span><br><span class="line"></span><br><span class="line">Authorization（授权）： 处理vSphere基础设施内的权限和访问控制。</span><br><span class="line"></span><br><span class="line">Extension（扩展）： 允许将附加功能或插件集成到vSphere环境中。</span><br><span class="line"></span><br><span class="line">VApp（虚拟应用程序）： 表示封装和分发软件应用程序以及其配置和依赖关系的软件包。</span><br><span class="line"></span><br><span class="line">Profile（配置文件）： 通常指主机配置文件，用于标准化和自动化ESXi主机的配置。</span><br><span class="line"></span><br><span class="line">EAM（ESXi代理管理器）： 管理ESXi主机上的软件组件。</span><br><span class="line"></span><br><span class="line">StoragePod（存储资源池）： 一种在存储资源中组织和管理资源的方式。</span><br><span class="line"></span><br><span class="line">Certificate（证书）： 处理用于安全通信的SSL证书的管理。</span><br><span class="line"></span><br><span class="line">HealthUpdateProvider（健康更新提供者）： 提供健康相关信息和更新。</span><br><span class="line"></span><br><span class="line">ExternalStatsProvider（外部统计信息提供者）： 涉及外部来源提供统计信息。</span><br><span class="line"></span><br><span class="line">Cryptographer（加密专家）： 处理vSphere环境中的加密操作。</span><br><span class="line"></span><br><span class="line">TenantManager（租户管理器）： 在虚拟化环境中管理多租户方面的组件。</span><br><span class="line"></span><br><span class="line">GuestDataPublisher（客户数据发布者）： 涉及在虚拟机的客户操作系统中发布或管理数据。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VMware-vSphere网络、vSwitch、端口组&quot;&gt;&lt;a href=&quot;#VMware-vSphere网络、vSwitch、端口组&quot; class=&quot;headerlink&quot; title=&quot;VMware vSphere网络、vSwitch、端口组&quot;&gt;&lt;/a&gt;VM</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tun/tap 虚拟网络设备与VPN隧道原理</title>
    <link href="http://example.com/2023/11/21/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2023/11/21/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86/</id>
    <published>2023-11-21T02:22:01.000Z</published>
    <updated>2023-11-21T06:40:34.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_102730.png"></p><h2 id="什么是Tun-Tap"><a href="#什么是Tun-Tap" class="headerlink" title="什么是Tun&#x2F;Tap"></a>什么是Tun&#x2F;Tap</h2><ul><li><p>TUN 和 TAP是操作系统内核中的虚拟网络设备。</p></li><li><p>全部靠软件实现</p></li><li><p>向运行在操作系统上的软件提供 与硬件的网络设备完全相同的功能。</p></li><li><p>TAP等同于一个以太网设备，它操作第二层数据包如以太网数据帧。</p></li><li><p>TUN模拟了网络层设备，操作第三层数据包，比如IP数据封包。</p></li><li><p>操作系统通过TUN&#x2F;TAP设备向绑定该设备的用户空间的程序发送数据（写入&#x2F;dev&#x2F;xx 字符设备）</p></li><li><p>用户空间的程序也能像操作系统硬件网络设备那样，通过TUN&#x2F;TAP发送数据。</p><ul><li>TUN&#x2F;TAP设备向操作系统的网络栈投递数据包。从而模拟从外部接收数据的过程。</li></ul></li></ul><h3 id="应用程序操作Tun-Tap"><a href="#应用程序操作Tun-Tap" class="headerlink" title="应用程序操作Tun&#x2F;Tap"></a>应用程序操作Tun&#x2F;Tap</h3><ul><li><p>Linux TUN&#x2F;TAP 驱动程序为应用程序提供了两种交互方式：</p><ul><li>虚拟网络接口和字符设备&#x2F;dev&#x2F;net&#x2F;tun<ul><li>写入字符设备&#x2F;dev&#x2F;net&#x2F;tun的数据会发送到虚拟网络接口中；发送到虚拟网络接口中的数据也会出现在该字符设备上。</li></ul></li></ul></li><li><p>应用程序可以通过标准的socket api向tun&#x2F;tap 接口发送ip数据包，就像对一个真实网卡操作一样。</p></li><li><p>操作系统也会根据TCP&#x2F;IP 协议栈的处理向TUN&#x2F;TAP接口发送IP数据包或者以太网数据，如arp&#x2F;icmp 包。</p></li><li><p>Tun&#x2F;Tap驱动程序会将Tun&#x2F;Tap接口收到的数据包原样写入到&#x2F;dev&#x2F;net&#x2F;tun字符设备上，处理Tun&#x2F;Tap数据的应用程序如<strong>VPN程序可以从该设备上读取到数据包，以进行相应处理。</strong></p><blockquote><p>这个vpn 程序在 用户空间。WireGuard 可以在内核中运行。</p></blockquote></li><li><p>应用程序也可以通过&#x2F;dev&#x2F;net&#x2F;tun字符设备写入数据包，这种情况下该字符设备上写入的数据包会被发送到Tun&#x2F;Tap虚拟接口上，进入操作系统的TCP&#x2F;IP协议栈进行相应处理，就像从物理网卡进入操作系统的数据一样。<br><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_132529.png"></p></li></ul><h3 id="使用TUN-TAP创建点对点隧道"><a href="#使用TUN-TAP创建点对点隧道" class="headerlink" title="使用TUN&#x2F;TAP创建点对点隧道"></a>使用TUN&#x2F;TAP创建点对点隧道</h3><p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_132743.png"></p><ul><li><p>左边主机上的应用程序 通过 socket api，协议栈发送到tun 虚拟设备上的ip数据包（路由+iptables 到tun）的ip数据包被VPN程序通过字符设备接收，然后再通过一个TCP或者UDP隧道（加密原来的ip包，使之成为udp的普通数据）发送到右端的VPN服务器上，VPN服务器将隧道负载中的原始IP数据包（解密成原来的ip包）写入字符设备，这些IP包就会出现在右侧的Tun虚拟设备上，最后通过操作系统协议栈和socket接口发送到右侧的应用程序上。</p></li><li><p>隧道也可以采用tap虚拟设备实现。使用Tap的话，隧道的负载将是以太数据帧而不是IP数据包，而且还会传递ARP等广播数据包。</p></li></ul><p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_135204.png"></p><h3 id="物理网卡和虚拟网卡"><a href="#物理网卡和虚拟网卡" class="headerlink" title="物理网卡和虚拟网卡"></a>物理网卡和虚拟网卡</h3><ul><li>绝不可能通过虚拟网卡向外界发送数据，外界数据也不可能直接发送到虚拟网卡上。能够直接收发外界数据的，只能是物理设备。<ul><li>可以将数据传输到本机的另一个网卡(虚拟网卡或物理网卡)或其它虚拟设备(如虚拟交换机)上</li><li>可以在用户空间运行一个可读写虚拟网卡的程序，该程序可将流经虚拟网卡的数据包进行处理，这个用户程序就像是物理网卡的硬件功能一样，可以收发数据(可将物理网卡的硬件功能看作是嵌入在网卡上的程序)，比如OpenVPN就是这样的工具<blockquote><p>用户空间的程序是无法对数据包做任何封装和解封操作的，所有的封装和解封都只能由内核的网络协议栈来完成。<br>在不绕过内核的情况下，网络数据的封装和解封由内核负责，用户空间的程序无法对数据进行封装和解封。<br><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_101237.png"></p></blockquote></li></ul></li></ul><blockquote><p>写虚拟网卡的用户空间程序仅充当了一个特殊的【转发】程序：要么转发四层tcp&#x2F;udp数据，要么转发三层数据包，要么转发二层数据帧。</p></blockquote><p>假如物理网卡eth0从外界网络接收了这么一段特殊的ping请求数据：<br><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_140400.png"><br>这份数据会从物理网卡传输到内核网络协议栈，网络协议栈会对其解封，解封的内容只能是tcp&#x2F;ip协议栈中的内容，即只能解封帧头部、IP头部以及端口头部，网络协议栈解封后还剩下一段包含了内层IP头部(tun的IP)以及icmp请求的数据。</p><p>内核会根据刚才解封的端口号找到对应的服务进程，并将解封剩下的数据传输给该进程，即传输给用户空间的程序。</p><p>用户空间的程序不做任何修改地将读取到的包含了内层IP头部和ICMP请求的数据原封不动地写入虚拟网卡设备，内核从虚拟网卡接收到数据后，将数据进行解封，解封得到最终的icmp请求数据，于是内核开始构建用于响应ping请求的数据。</p><ul><li>参考<br><a href="https://www.junmajinlong.com/virtual/network/all_about_tun_tap/index.html">理解Linux虚拟网卡设备tun&#x2F;tap的一切</a><br><a href="https://blog.csdn.net/zhou307/article/details/102806500">tun&#x2F;tap虚拟网卡收发机制解析</a><br><a href="https://www.luozhiyun.com/archives/684">云原生虚拟网络 tun&#x2F;tap &amp; veth-pair</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_10273</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wireguard 介绍</title>
    <link href="http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-17T01:49:09.000Z</published>
    <updated>2023-12-04T02:40:42.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WireGuard-简介"><a href="#WireGuard-简介" class="headerlink" title="WireGuard 简介"></a>WireGuard 简介</h2><ul><li>Wireguard 是一个安全的网络通道<ul><li>wireguard是一种VPN协议</li></ul></li><li>wireguard 工作在第三层<ul><li>工作在X层代表可以解析第X层的数据包。</li><li>比如交换机是工作在第二层的设备，是指其可以解析第二层的以太帧帧头；路由器是工作第三层的设备是指其可以解析第三层的IP包包头），</li><li>其可以解析数据包的源目的IP。</li></ul></li><li>实现形式为linux内核中的一个虚拟网络网卡(注：实际上目前Wireguard协议不仅仅是linux内核实现，还有golang实现)</li><li>只需要一轮交互就可以完成密钥交换</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_132501.png"><br><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_093217.png"></p><ul><li><p>WireGuard 以 UDP 实现，但是运行在第三层 —— IP 层。每个 Peer 都会生成一个 wg0 虚拟网卡，同时服务端会在物理网卡上监听 UDP 51820 端口。应用程序的包发送到内核以后，如果地址是虚拟专用网内部的，那么就会交给 wg0 设备，WireGuard 就会把这个 IP 包封装成 WireGuard 的包，然后在 UDP 中发送出去，对方的 Peer 的内核收到这个 UDP 包后再反向操作，解包成为 IP 包，然后交给对应的应用程序。</p></li><li><p>WireGuard 实现方式是内核模块，所以上面所说的解包封包转发等操作都是在内核实现的，基本不需要什么复制。相对而言，OpenXXX 这种在用户层实现的协议就需要在内核和用户空间之间拷贝来拷贝去，对性能是硬伤。</p></li></ul><h2 id="路由最长匹配原则-静态路由表-和-默认路由"><a href="#路由最长匹配原则-静态路由表-和-默认路由" class="headerlink" title="路由最长匹配原则(静态路由表) 和 默认路由"></a>路由最长匹配原则(静态路由表) 和 默认路由</h2><h3 id="静态路由表"><a href="#静态路由表" class="headerlink" title="静态路由表"></a>静态路由表</h3><p><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_150923.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. NETworK:目的地址/前缀长度</span><br><span class="line">2. Mask: 掩码</span><br><span class="line">3. Next Hop: 下一跳</span><br></pre></td></tr></table></figure><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><ol><li>路由器收到分组，解包取出目的ip地址；</li></ol></li><li><ol start="2"><li>在路由表中匹配表项：目的ip地址和路由表项中的Mask掩码相与，用得到的网络地址和Network比较；</li></ol><ul><li>找到相同的，继续查找，根据最长匹配原则获取匹配长度最长的路由项。最后按最优的路由表项的Next Hop进行转发；</li><li>找不到相同的，有默认路由按默认路由的Next Hop进行转发；若没有默认路由，弃帧；</li></ul></li></ul><h3 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h3><ul><li>默认路由表项的Network和Mask 都是0.0.0.0</li><li>当普通静态路由表项没有匹配的表项，路由器就会选择默认路由<ul><li><ol><li>Mask0.0.0.0和收到分组的目的ip地址相与，得到的网络地址就是0.0.0.0，和默认路由表项的Network相同，也是匹配的；</li></ol></li><li><ol start="2"><li>Network0.0.0.0相当于是最短的前缀。普通静态路由表项的前缀一定比默认路由表项的前缀长，那么如果普通路由表项能匹配，必定不需要选择默认路由表项，这也是符合路由最长匹配原则。</li></ol></li></ul></li></ul><h2 id="wireguard-路由详解"><a href="#wireguard-路由详解" class="headerlink" title="wireguard 路由详解"></a>wireguard 路由详解</h2><h3 id="main-路由表"><a href="#main-路由表" class="headerlink" title="main 路由表"></a>main 路由表</h3><ul><li><p><code>ip route</code> 查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default via 192.168.100.254 dev eth0 proto dhcp src 192.168.100.63 metric 100 </span><br><span class="line">192.168.100.0/24 dev eth0 proto kernel scope link src 192.168.100.63 </span><br><span class="line">192.168.100.254 dev eth0 proto dhcp scope link src 192.168.100.63 metric 100</span><br></pre></td></tr></table></figure><blockquote><p>第一条：表示 默认路由规则。任何目标不在本地子网（局域网）内的数据包将通过 eth0 网络接口发送到网关 192.168.100.254，该网关是通过 DHCP 协议获取的。源IP地址将被设置为 192.168.100.63。度量值 100 表示这是一个比较优先的路由规则。<br>第二条：表示 <strong>本地子网路由规则</strong>。表示 192.168.100.0&#x2F;24 网段是直接连接到 eth0 网络接口的本地子网。这是一个由内核自动生成的本地链路路由规则，用于直接通信到本地子网，无需经过网关。</p></blockquote></li><li><p><code>scope link</code> 表示本地子网范围 </p><blockquote><p>第三条：表示 网关路由规则。指定了网关 192.168.100.254 是通过 DHCP 协议获取的，并且它是通过 eth0 网络接口连接的。与默认路由规则相比，这个规则更加详细，它是一个到网关的直接链路路由规则。度量值 100 表示这是一个比较优先的路由规则。</p></blockquote></li><li><p>从路由表中可以看出，所有的流量都是从物理网卡出去的，并没有通过WireGuard虚拟网络接口。</p></li></ul><h4 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h4><ul><li><p>从linux2.2的版本开始，内核中就有多个路由表，并且还有一套规则，这套规则告诉内核 <strong>这套规则会告诉内核如何为每个数据包选择正确的路由表。</strong></p></li><li><p>执行 <code>ip route</code>时，看到的是特定的路由表main。除了main之外还有其他的路由表存在。路由表一般用整数来标识，也可以通过文本对其命名，这些命名都保存在文件 &#x2F;etc&#x2F;iproute2&#x2F;rt_tables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/iproute2/rt_tables</span><br><span class="line">#</span><br><span class="line"># reserved values</span><br><span class="line">#</span><br><span class="line">255     local</span><br><span class="line">254     main</span><br><span class="line">253     default</span><br><span class="line">0       unspec</span><br><span class="line">#</span><br><span class="line"># local</span><br><span class="line">#</span><br><span class="line">#1      inr.ruhep</span><br></pre></td></tr></table></figure></li><li><p>linux 系统中，可以自定义从 <code>1-252</code>个路由表。linux系统默认维护了4个路由表：</p><ul><li>0: 系统保留表</li><li>253：default table. 没特别指定的默认路由都放在该表。</li><li>254：main table. 没指明路由表的所有路由放在该表。</li><li>255：local table. 保存本地接口地址，广播地址，NAT地址，由系统维护，用户不得更改。</li></ul></li><li><p>路由表的查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show table table_number</span><br><span class="line"> </span><br><span class="line">$ ip route show table table_name</span><br></pre></td></tr></table></figure><blockquote><p>路由表决定 <strong>如何传输数据包</strong><br>iptables决定 <strong>是否传输数据包</strong></p></blockquote></li></ul><h3 id="路由策略"><a href="#路由策略" class="headerlink" title="路由策略"></a>路由策略</h3><ul><li><p>内核是如何知道哪个数据包应该使用哪个路由表呢？</p></li><li><p>系统中有一套规则会告诉内核如何为每个数据包选择正确的路由表，这套规则就是路由策略数据库。这个数据库由 ip rule 命令来管理，如果不加任何参数，将会打印所有的路由规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:      from all lookup local</span><br><span class="line">32766:  from all lookup main</span><br><span class="line">32767:  from all lookup default</span><br></pre></td></tr></table></figure></li><li><p>左边的数字（0,32764,…..）表示规则的优先级：</p><ul><li><strong>数值越小的规则，优先级越高</strong></li><li>数值较小的规则会被优先处理。<blockquote><p>“路由规则的数值范围: 1~2^23−1”</p></blockquote></li></ul></li><li><p>除了优先级外，每个规则还有一个选择器(selector)和对应的执行策略(action).</p><ul><li>选择器会判断<strong>该规则是否适用于当前的数据包</strong>，如果适用，就执行对应的策略。最常见的执行策略就是查询一个特定的路由表（参考上一节内容）。如果该路由表包含了当前数据包的路由，那么就执行该路由；<strong>否则就会跳过当前路由表，继续匹配下一个路由规则。</strong></li></ul></li><li><p>在 Linux 系统启动时，内核会为路由策略数据库配置三条缺省的规则：</p><ul><li>0：匹配任何条件，查询路由表 local (ID 255)，该表 local 是一个特殊的路由表，包含对于本地和广播地址的优先级控制路由。rule 0 非常特殊，不能被删除或者覆盖。</li><li>32766：匹配任何条件，查询路由表 main (ID 254)，该表是一个常规的表，包含所有的无策略路由。系统管理员可以删除或者使用另外的规则覆盖这条规则。</li><li>32767：匹配任何条件，查询路由表 default (ID 253)，该表是一个空表，它是后续处理保留。对于前面的策略没有匹配到的数据包，系统使用这个策略进行处理，这个规则也可以删除。</li></ul></li><li><p>在默认情况下进行路由时，首先会根据规则 0 在本地路由表里寻找路由，如果目的地址是本网络，或是广播地址的话，在这里就可以找到合适的路由；如果路由失败，就会匹配下一个不空的规则，在这里只有 32766 规则，在这里将会在主路由表里寻找路由；如果失败，就会匹配 32767 规则，即寻找默认路由表。如果失败，路由将失败。从这里可以看出，策略性路由是往前兼容的。</p></li></ul><h3 id="WireGuard-全局路由策略"><a href="#WireGuard-全局路由策略" class="headerlink" title="WireGuard 全局路由策略"></a>WireGuard 全局路由策略</h3><ul><li>本质：添加了新的规则和表来实现特定路由（wg0出去，修改数据包（iptables））</li><li>wg-quick 这种做法的巧妙之处在于，它不会扰乱你的主路由表，而是通过规则匹配新创建的路由表。断开连接时只需删除这两条路由规则，默认路由就会被重新激活。</li></ul><blockquote><p><a href="https://cloud.tencent.com/developer/article/2153889">参考</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WireGuard-简介&quot;&gt;&lt;a href=&quot;#WireGuard-简介&quot; class=&quot;headerlink&quot; title=&quot;WireGuard 简介&quot;&gt;&lt;/a&gt;WireGuard 简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Wireguard 是一个安全的网络通道&lt;ul&gt;</summary>
      
    
    
    
    
    <category term="wireguard,VPN" scheme="http://example.com/tags/wireguard-VPN/"/>
    
  </entry>
  
  <entry>
    <title>博客介绍</title>
    <link href="http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-16T07:49:45.000Z</published>
    <updated>2023-11-17T01:41:53.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到-你的名字-的个人知识博客！"><a href="#欢迎来到-你的名字-的个人知识博客！" class="headerlink" title="欢迎来到 [你的名字] 的个人知识博客！"></a>欢迎来到 [你的名字] 的个人知识博客！</h1><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>嗨，大家好！我是Fisher JJ，一个对计算机充满热情的人。通过这个博客，我希望与大家分享我的学习和思考，探讨 计算机领域的各种话题。</p><h2 id="为什么我要写这个博客？"><a href="#为什么我要写这个博客？" class="headerlink" title="为什么我要写这个博客？"></a>为什么我要写这个博客？</h2><p>我创建这个博客的初衷是为了建立一个记录自己学习的平台。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欢迎来到-你的名字-的个人知识博客！&quot;&gt;&lt;a href=&quot;#欢迎来到-你的名字-的个人知识博客！&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到 [你的名字] 的个人知识博客！&quot;&gt;&lt;/a&gt;欢迎来到 [你的名字] 的个人知识博客！&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="个人介绍" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
