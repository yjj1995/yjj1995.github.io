<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Fisher JJ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-22T10:37:26.163Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fisher JJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESXI 网络</title>
    <link href="http://example.com/2023/11/22/ESXI-%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2023/11/22/ESXI-%E7%BD%91%E7%BB%9C/</id>
    <published>2023-11-22T08:45:52.000Z</published>
    <updated>2023-11-22T10:37:26.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VMware-vSphere网络、vSwitch、端口组"><a href="#VMware-vSphere网络、vSwitch、端口组" class="headerlink" title="VMware vSphere网络、vSwitch、端口组"></a>VMware vSphere网络、vSwitch、端口组</h2><h3 id="ESXI-网络"><a href="#ESXI-网络" class="headerlink" title="ESXI 网络"></a>ESXI 网络</h3><ul><li><p>目的</p><ul><li>相互交流（想想 vMotion）</li><li>与 vCenter 通信（想想 HA）</li><li>与他们依赖的外部资源进行通信，例如存储阵列或 Active Directory</li><li>允许它们的常驻虚拟机与它们可能依赖的其他虚拟机和外部资源进行通信</li></ul></li><li><p>配置</p><ul><li>ESXI 主机上的虚拟交换机</li><li>虚拟交换机上的端口组</li></ul></li></ul><h3 id="ECXI主机上的虚拟交换机"><a href="#ECXI主机上的虚拟交换机" class="headerlink" title="ECXI主机上的虚拟交换机"></a>ECXI主机上的虚拟交换机</h3><ul><li><p>将 ESXi 主机上的虚拟交换机视为您之前可能遇到的任何其他交换机，当涉及到网络层时，ESXi 中的虚拟交换机是为我们的 ESXi 主机提供连接、冗余和负载平衡的方式。</p></li><li><p>有两种类型的开关，尽管您可能会听到它们各自使用几个不同的名称。</p><ul><li>vSphere 标准交换机</li><li>vSphere 分布式交换机（需要vSphere Enterprise Plus 许可）</li></ul></li></ul><h4 id="vSphere-标准交换机-标准-vSwitch-vSwitch"><a href="#vSphere-标准交换机-标准-vSwitch-vSwitch" class="headerlink" title="vSphere 标准交换机 &#x2F; 标准 vSwitch&#x2F; vSwitch"></a>vSphere 标准交换机 &#x2F; 标准 vSwitch&#x2F; vSwitch</h4><ul><li>基本虚拟交换机。</li><li>标准 vSwitch 驻留在 ESXi 主机上，必须在每个主机上单独配置<ul><li>可以通过PowerCLI或主机配置文件简化配置</li></ul></li></ul><p><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_171510.png"></p><ul><li><p>网络交换机（物理）连接到ESXI主机中的 网卡（一般是指的是物理网卡）</p></li><li><p>ESXI主机中的 网卡（一般是指的是物理网卡）连接到ESXI中的虚拟交换机</p></li><li><p>ESXI可以有多个vSwitch.</p></li></ul><h4 id="vSphere-分布式交换机-分布式虚拟交换机-dvSwitch"><a href="#vSphere-分布式交换机-分布式虚拟交换机-dvSwitch" class="headerlink" title="vSphere 分布式交换机&#x2F;分布式虚拟交换机&#x2F;dvSwitch"></a>vSphere 分布式交换机&#x2F;分布式虚拟交换机&#x2F;dvSwitch</h4><ul><li>标准虚拟交换机和分布式虚拟交换机之间没有太大区别。</li><li>仍然以冗余方式将 ESXi 主机中的网卡连接到网络交换机，改变的是虚拟层，以及 VMware vSphere 本身内的交换机。<br><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_172134.png"></li><li>交换机配置本身位于 vCenter 服务器而不是 ESXi 主机上</li><li>每个 ESXi 主机上都有分布式虚拟交换机配置的副本，正如您在每个主机上的亮蓝色交换机中看到的那样，这样，如果 vCenter 发生问题，我们的虚拟机就不会受到影响。<br><img src="/../images/ESXI-%E7%BD%91%E7%BB%9C_172242.png"></li><li>每个vmnic(ESXI主机的网卡)都连接到分布式虚拟交换机上的相应dvUplink端口。</li><li>通过cCenter 服务器管理分布式虚拟交换机<ul><li>分布式虚拟交换机配置在每个 ESXi 主机上的设计都是相同的。</li></ul></li><li>与标准 vSwitch 类似，可以使用 vSphere Client、PowerCLI 或主机配置文件管理分布式 vSwitch。这里的区别在于，您在 vCenter 服务器上配置单个分布式虚拟交换机，而不是 ESXi 主机上的单个虚拟交换机。</li></ul><blockquote><p>vSphere Distributed Switch 确实需要VMware Enterprise Plus 许可。</p></blockquote><h3 id="VMware-中的-NIC-成组策略"><a href="#VMware-中的-NIC-成组策略" class="headerlink" title="VMware 中的 NIC 成组策略"></a>VMware 中的 NIC 成组策略</h3><ul><li>多个物理网卡可以连接到虚拟交换机上形成冗余，实现负载均衡以及故障恢复。</li></ul><h3 id="虚拟交换机上的-端口组"><a href="#虚拟交换机上的-端口组" class="headerlink" title="虚拟交换机上的  端口组"></a>虚拟交换机上的  端口组</h3><ul><li>虚拟交换机上的一组虚拟端口（接口）</li><li>分类<ul><li>虚拟机端口组<ul><li>虚拟机端口组是我们连接虚拟机的方式。例如，我可能有一个带有单个 VLAN、多个 VLAN（VLAN 中继）的端口组，或者在分布式虚拟交换机的情况下是专用 VLAN。</li></ul></li><li>VMkernel 端口组</li></ul></li></ul><h4 id="VMkernel-端口组"><a href="#VMkernel-端口组" class="headerlink" title="VMkernel 端口组"></a>VMkernel 端口组</h4><ul><li>VMkernel 端口用于 VMware vSphere 中的非虚拟机流量</li><li>每个 ESXi 主机都有一个 VMkernel 端口用于主机管理。<ul><li>如果它是 vSphere 集群的成员，它还将有一个用于 vMotion 的 VMkernel 端口。</li><li>如果群集是 vSAN 群集，则将有一个用于 vSAN 的 VMkernel 端口。</li><li>网络存储服务，容错都有vmkernel端口</li></ul></li><li>每个 VMkernel 端口都有自己唯一的 IP 地址，您还可以更改 VMkernel 端口上的默认 MTU 1500。</li><li>端口组的作用是可以想象成虚拟交换机的下行端口，所以才能针对不同的业务进行VLAN以及流量的控制，将各业务流量进行逻辑隔离。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VMware-vSphere网络、vSwitch、端口组&quot;&gt;&lt;a href=&quot;#VMware-vSphere网络、vSwitch、端口组&quot; class=&quot;headerlink&quot; title=&quot;VMware vSphere网络、vSwitch、端口组&quot;&gt;&lt;/a&gt;VM</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tun/tap 虚拟网络设备与VPN隧道原理</title>
    <link href="http://example.com/2023/11/21/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2023/11/21/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86/</id>
    <published>2023-11-21T02:22:01.000Z</published>
    <updated>2023-11-21T06:40:34.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_102730.png"></p><h2 id="什么是Tun-Tap"><a href="#什么是Tun-Tap" class="headerlink" title="什么是Tun&#x2F;Tap"></a>什么是Tun&#x2F;Tap</h2><ul><li><p>TUN 和 TAP是操作系统内核中的虚拟网络设备。</p></li><li><p>全部靠软件实现</p></li><li><p>向运行在操作系统上的软件提供 与硬件的网络设备完全相同的功能。</p></li><li><p>TAP等同于一个以太网设备，它操作第二层数据包如以太网数据帧。</p></li><li><p>TUN模拟了网络层设备，操作第三层数据包，比如IP数据封包。</p></li><li><p>操作系统通过TUN&#x2F;TAP设备向绑定该设备的用户空间的程序发送数据（写入&#x2F;dev&#x2F;xx 字符设备）</p></li><li><p>用户空间的程序也能像操作系统硬件网络设备那样，通过TUN&#x2F;TAP发送数据。</p><ul><li>TUN&#x2F;TAP设备向操作系统的网络栈投递数据包。从而模拟从外部接收数据的过程。</li></ul></li></ul><h3 id="应用程序操作Tun-Tap"><a href="#应用程序操作Tun-Tap" class="headerlink" title="应用程序操作Tun&#x2F;Tap"></a>应用程序操作Tun&#x2F;Tap</h3><ul><li><p>Linux TUN&#x2F;TAP 驱动程序为应用程序提供了两种交互方式：</p><ul><li>虚拟网络接口和字符设备&#x2F;dev&#x2F;net&#x2F;tun<ul><li>写入字符设备&#x2F;dev&#x2F;net&#x2F;tun的数据会发送到虚拟网络接口中；发送到虚拟网络接口中的数据也会出现在该字符设备上。</li></ul></li></ul></li><li><p>应用程序可以通过标准的socket api向tun&#x2F;tap 接口发送ip数据包，就像对一个真实网卡操作一样。</p></li><li><p>操作系统也会根据TCP&#x2F;IP 协议栈的处理向TUN&#x2F;TAP接口发送IP数据包或者以太网数据，如arp&#x2F;icmp 包。</p></li><li><p>Tun&#x2F;Tap驱动程序会将Tun&#x2F;Tap接口收到的数据包原样写入到&#x2F;dev&#x2F;net&#x2F;tun字符设备上，处理Tun&#x2F;Tap数据的应用程序如<strong>VPN程序可以从该设备上读取到数据包，以进行相应处理。</strong></p><blockquote><p>这个vpn 程序在 用户空间。WireGuard 可以在内核中运行。</p></blockquote></li><li><p>应用程序也可以通过&#x2F;dev&#x2F;net&#x2F;tun字符设备写入数据包，这种情况下该字符设备上写入的数据包会被发送到Tun&#x2F;Tap虚拟接口上，进入操作系统的TCP&#x2F;IP协议栈进行相应处理，就像从物理网卡进入操作系统的数据一样。<br><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_132529.png"></p></li></ul><h3 id="使用TUN-TAP创建点对点隧道"><a href="#使用TUN-TAP创建点对点隧道" class="headerlink" title="使用TUN&#x2F;TAP创建点对点隧道"></a>使用TUN&#x2F;TAP创建点对点隧道</h3><p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_132743.png"></p><ul><li><p>左边主机上的应用程序 通过 socket api，协议栈发送到tun 虚拟设备上的ip数据包（路由+iptables 到tun）的ip数据包被VPN程序通过字符设备接收，然后再通过一个TCP或者UDP隧道（加密原来的ip包，使之成为udp的普通数据）发送到右端的VPN服务器上，VPN服务器将隧道负载中的原始IP数据包（解密成原来的ip包）写入字符设备，这些IP包就会出现在右侧的Tun虚拟设备上，最后通过操作系统协议栈和socket接口发送到右侧的应用程序上。</p></li><li><p>隧道也可以采用tap虚拟设备实现。使用Tap的话，隧道的负载将是以太数据帧而不是IP数据包，而且还会传递ARP等广播数据包。</p></li></ul><p><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_135204.png"></p><h3 id="物理网卡和虚拟网卡"><a href="#物理网卡和虚拟网卡" class="headerlink" title="物理网卡和虚拟网卡"></a>物理网卡和虚拟网卡</h3><ul><li>绝不可能通过虚拟网卡向外界发送数据，外界数据也不可能直接发送到虚拟网卡上。能够直接收发外界数据的，只能是物理设备。<ul><li>可以将数据传输到本机的另一个网卡(虚拟网卡或物理网卡)或其它虚拟设备(如虚拟交换机)上</li><li>可以在用户空间运行一个可读写虚拟网卡的程序，该程序可将流经虚拟网卡的数据包进行处理，这个用户程序就像是物理网卡的硬件功能一样，可以收发数据(可将物理网卡的硬件功能看作是嵌入在网卡上的程序)，比如OpenVPN就是这样的工具<blockquote><p>用户空间的程序是无法对数据包做任何封装和解封操作的，所有的封装和解封都只能由内核的网络协议栈来完成。<br>在不绕过内核的情况下，网络数据的封装和解封由内核负责，用户空间的程序无法对数据进行封装和解封。<br><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_101237.png"></p></blockquote></li></ul></li></ul><blockquote><p>写虚拟网卡的用户空间程序仅充当了一个特殊的【转发】程序：要么转发四层tcp&#x2F;udp数据，要么转发三层数据包，要么转发二层数据帧。</p></blockquote><p>假如物理网卡eth0从外界网络接收了这么一段特殊的ping请求数据：<br><img src="/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_140400.png"><br>这份数据会从物理网卡传输到内核网络协议栈，网络协议栈会对其解封，解封的内容只能是tcp&#x2F;ip协议栈中的内容，即只能解封帧头部、IP头部以及端口头部，网络协议栈解封后还剩下一段包含了内层IP头部(tun的IP)以及icmp请求的数据。</p><p>内核会根据刚才解封的端口号找到对应的服务进程，并将解封剩下的数据传输给该进程，即传输给用户空间的程序。</p><p>用户空间的程序不做任何修改地将读取到的包含了内层IP头部和ICMP请求的数据原封不动地写入虚拟网卡设备，内核从虚拟网卡接收到数据后，将数据进行解封，解封得到最终的icmp请求数据，于是内核开始构建用于响应ping请求的数据。</p><ul><li>参考<br><a href="https://www.junmajinlong.com/virtual/network/all_about_tun_tap/index.html">理解Linux虚拟网卡设备tun&#x2F;tap的一切</a><br><a href="https://blog.csdn.net/zhou307/article/details/102806500">tun&#x2F;tap虚拟网卡收发机制解析</a><br><a href="https://www.luozhiyun.com/archives/684">云原生虚拟网络 tun&#x2F;tap &amp; veth-pair</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/tun-tap-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%B8%8EVPN%E9%9A%A7%E9%81%93%E5%8E%9F%E7%90%86_10273</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wireguard 介绍</title>
    <link href="http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/17/wireguard-%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-17T01:49:09.000Z</published>
    <updated>2023-11-22T01:37:42.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WireGuard-简介"><a href="#WireGuard-简介" class="headerlink" title="WireGuard 简介"></a>WireGuard 简介</h2><ul><li>Wireguard 是一个安全的网络通道<ul><li>wireguard是一种VPN协议</li></ul></li><li>wireguard 工作在第三层<ul><li>工作在X层代表可以解析第X层的数据包。</li><li>比如交换机是工作在第二层的设备，是指其可以解析第二层的以太帧帧头；路由器是工作第三层的设备是指其可以解析第三层的IP包包头），</li><li>其可以解析数据包的源目的IP。</li></ul></li><li>实现形式为linux内核中的一个虚拟网络网卡(注：实际上目前Wireguard协议不仅仅是linux内核实现，还有golang实现)</li><li>只需要一轮交互就可以完成密钥交换</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_093217.png"></p><ul><li><p>WireGuard 以 UDP 实现，但是运行在第三层 —— IP 层。每个 Peer 都会生成一个 wg0 虚拟网卡，同时服务端会在物理网卡上监听 UDP 51820 端口。应用程序的包发送到内核以后，如果地址是虚拟专用网内部的，那么就会交给 wg0 设备，WireGuard 就会把这个 IP 包封装成 WireGuard 的包，然后在 UDP 中发送出去，对方的 Peer 的内核收到这个 UDP 包后再反向操作，解包成为 IP 包，然后交给对应的应用程序。</p></li><li><p>WireGuard 实现方式是内核模块，所以上面所说的解包封包转发等操作都是在内核实现的，基本不需要什么复制。相对而言，OpenXXX 这种在用户层实现的协议就需要在内核和用户空间之间拷贝来拷贝去，对性能是硬伤。</p></li></ul><h2 id="路由最长匹配原则-静态路由表-和-默认路由"><a href="#路由最长匹配原则-静态路由表-和-默认路由" class="headerlink" title="路由最长匹配原则(静态路由表) 和 默认路由"></a>路由最长匹配原则(静态路由表) 和 默认路由</h2><h3 id="静态路由表"><a href="#静态路由表" class="headerlink" title="静态路由表"></a>静态路由表</h3><p><img src="/../images/wireguard-%E4%BB%8B%E7%BB%8D_150923.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. NETworK:目的地址/前缀长度</span><br><span class="line">2. Mask: 掩码</span><br><span class="line">3. Next Hop: 下一跳</span><br></pre></td></tr></table></figure><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><ol><li>路由器收到分组，解包取出目的ip地址；</li></ol></li><li><ol start="2"><li>在路由表中匹配表项：目的ip地址和路由表项中的Mask掩码相与，用得到的网络地址和Network比较；</li></ol><ul><li>找到相同的，继续查找，根据最长匹配原则获取匹配长度最长的路由项。最后按最优的路由表项的Next Hop进行转发；</li><li>找不到相同的，有默认路由按默认路由的Next Hop进行转发；若没有默认路由，弃帧；</li></ul></li></ul><h3 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h3><ul><li>默认路由表项的Network和Mask 都是0.0.0.0</li><li>当普通静态路由表项没有匹配的表项，路由器就会选择默认路由<ul><li><ol><li>Mask0.0.0.0和收到分组的目的ip地址相与，得到的网络地址就是0.0.0.0，和默认路由表项的Network相同，也是匹配的；</li></ol></li><li><ol start="2"><li>Network0.0.0.0相当于是最短的前缀。普通静态路由表项的前缀一定比默认路由表项的前缀长，那么如果普通路由表项能匹配，必定不需要选择默认路由表项，这也是符合路由最长匹配原则。</li></ol></li></ul></li></ul><h2 id="wireguard-路由详解"><a href="#wireguard-路由详解" class="headerlink" title="wireguard 路由详解"></a>wireguard 路由详解</h2><h3 id="main-路由表"><a href="#main-路由表" class="headerlink" title="main 路由表"></a>main 路由表</h3><ul><li><p><code>ip route</code> 查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default via 192.168.100.254 dev eth0 proto dhcp src 192.168.100.63 metric 100 </span><br><span class="line">192.168.100.0/24 dev eth0 proto kernel scope link src 192.168.100.63 </span><br><span class="line">192.168.100.254 dev eth0 proto dhcp scope link src 192.168.100.63 metric 100</span><br></pre></td></tr></table></figure><blockquote><p>第一条：表示 默认路由规则。任何目标不在本地子网（局域网）内的数据包将通过 eth0 网络接口发送到网关 192.168.100.254，该网关是通过 DHCP 协议获取的。源IP地址将被设置为 192.168.100.63。度量值 100 表示这是一个比较优先的路由规则。<br>第二条：表示 <strong>本地子网路由规则</strong>。表示 192.168.100.0&#x2F;24 网段是直接连接到 eth0 网络接口的本地子网。这是一个由内核自动生成的本地链路路由规则，用于直接通信到本地子网，无需经过网关。</p></blockquote></li><li><p><code>scope link</code> 表示本地子网范围 </p><blockquote><p>第三条：表示 网关路由规则。指定了网关 192.168.100.254 是通过 DHCP 协议获取的，并且它是通过 eth0 网络接口连接的。与默认路由规则相比，这个规则更加详细，它是一个到网关的直接链路路由规则。度量值 100 表示这是一个比较优先的路由规则。</p></blockquote></li><li><p>从路由表中可以看出，所有的流量都是从物理网卡出去的，并没有通过WireGuard虚拟网络接口。</p></li></ul><h4 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h4><ul><li><p>从linux2.2的版本开始，内核中就有多个路由表，并且还有一套规则，这套规则告诉内核 <strong>这套规则会告诉内核如何为每个数据包选择正确的路由表。</strong></p></li><li><p>执行 <code>ip route</code>时，看到的是特定的路由表main。除了main之外还有其他的路由表存在。路由表一般用整数来标识，也可以通过文本对其命名，这些命名都保存在文件 &#x2F;etc&#x2F;iproute2&#x2F;rt_tables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/iproute2/rt_tables</span><br><span class="line">#</span><br><span class="line"># reserved values</span><br><span class="line">#</span><br><span class="line">255     local</span><br><span class="line">254     main</span><br><span class="line">253     default</span><br><span class="line">0       unspec</span><br><span class="line">#</span><br><span class="line"># local</span><br><span class="line">#</span><br><span class="line">#1      inr.ruhep</span><br></pre></td></tr></table></figure></li><li><p>linux 系统中，可以自定义从 <code>1-252</code>个路由表。linux系统默认维护了4个路由表：</p><ul><li>0: 系统保留表</li><li>253：default table. 没特别指定的默认路由都放在该表。</li><li>254：main table. 没指明路由表的所有路由放在该表。</li><li>255：local table. 保存本地接口地址，广播地址，NAT地址，由系统维护，用户不得更改。</li></ul></li><li><p>路由表的查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show table table_number</span><br><span class="line"> </span><br><span class="line">$ ip route show table table_name</span><br></pre></td></tr></table></figure><blockquote><p>路由表决定 <strong>如何传输数据包</strong><br>iptables决定 <strong>是否传输数据包</strong></p></blockquote></li></ul><h3 id="路由策略"><a href="#路由策略" class="headerlink" title="路由策略"></a>路由策略</h3><ul><li><p>内核是如何知道哪个数据包应该使用哪个路由表呢？</p></li><li><p>系统中有一套规则会告诉内核如何为每个数据包选择正确的路由表，这套规则就是路由策略数据库。这个数据库由 ip rule 命令来管理，如果不加任何参数，将会打印所有的路由规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:      from all lookup local</span><br><span class="line">32766:  from all lookup main</span><br><span class="line">32767:  from all lookup default</span><br></pre></td></tr></table></figure></li><li><p>左边的数字（0,32764,…..）表示规则的优先级：</p><ul><li><strong>数值越小的规则，优先级越高</strong></li><li>数值较小的规则会被优先处理。<blockquote><p>“路由规则的数值范围: 1~2^23−1”</p></blockquote></li></ul></li><li><p>除了优先级外，每个规则还有一个选择器(selector)和对应的执行策略(action).</p><ul><li>选择器会判断<strong>该规则是否适用于当前的数据包</strong>，如果适用，就执行对应的策略。最常见的执行策略就是查询一个特定的路由表（参考上一节内容）。如果该路由表包含了当前数据包的路由，那么就执行该路由；<strong>否则就会跳过当前路由表，继续匹配下一个路由规则。</strong></li></ul></li><li><p>在 Linux 系统启动时，内核会为路由策略数据库配置三条缺省的规则：</p><ul><li>0：匹配任何条件，查询路由表 local (ID 255)，该表 local 是一个特殊的路由表，包含对于本地和广播地址的优先级控制路由。rule 0 非常特殊，不能被删除或者覆盖。</li><li>32766：匹配任何条件，查询路由表 main (ID 254)，该表是一个常规的表，包含所有的无策略路由。系统管理员可以删除或者使用另外的规则覆盖这条规则。</li><li>32767：匹配任何条件，查询路由表 default (ID 253)，该表是一个空表，它是后续处理保留。对于前面的策略没有匹配到的数据包，系统使用这个策略进行处理，这个规则也可以删除。</li></ul></li><li><p>在默认情况下进行路由时，首先会根据规则 0 在本地路由表里寻找路由，如果目的地址是本网络，或是广播地址的话，在这里就可以找到合适的路由；如果路由失败，就会匹配下一个不空的规则，在这里只有 32766 规则，在这里将会在主路由表里寻找路由；如果失败，就会匹配 32767 规则，即寻找默认路由表。如果失败，路由将失败。从这里可以看出，策略性路由是往前兼容的。</p></li></ul><h3 id="WireGuard-全局路由策略"><a href="#WireGuard-全局路由策略" class="headerlink" title="WireGuard 全局路由策略"></a>WireGuard 全局路由策略</h3><ul><li>本质：添加了新的规则和表来实现特定路由（wg0出去，修改数据包（iptables））</li><li>wg-quick 这种做法的巧妙之处在于，它不会扰乱你的主路由表，而是通过规则匹配新创建的路由表。断开连接时只需删除这两条路由规则，默认路由就会被重新激活。</li></ul><blockquote><p><a href="https://cloud.tencent.com/developer/article/2153889">参考</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WireGuard-简介&quot;&gt;&lt;a href=&quot;#WireGuard-简介&quot; class=&quot;headerlink&quot; title=&quot;WireGuard 简介&quot;&gt;&lt;/a&gt;WireGuard 简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Wireguard 是一个安全的网络通道&lt;ul&gt;</summary>
      
    
    
    
    
    <category term="wireguard,VPN" scheme="http://example.com/tags/wireguard-VPN/"/>
    
  </entry>
  
  <entry>
    <title>博客介绍</title>
    <link href="http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-16T07:49:45.000Z</published>
    <updated>2023-11-17T01:41:53.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到-你的名字-的个人知识博客！"><a href="#欢迎来到-你的名字-的个人知识博客！" class="headerlink" title="欢迎来到 [你的名字] 的个人知识博客！"></a>欢迎来到 [你的名字] 的个人知识博客！</h1><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>嗨，大家好！我是Fisher JJ，一个对计算机充满热情的人。通过这个博客，我希望与大家分享我的学习和思考，探讨 计算机领域的各种话题。</p><h2 id="为什么我要写这个博客？"><a href="#为什么我要写这个博客？" class="headerlink" title="为什么我要写这个博客？"></a>为什么我要写这个博客？</h2><p>我创建这个博客的初衷是为了建立一个记录自己学习的平台。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欢迎来到-你的名字-的个人知识博客！&quot;&gt;&lt;a href=&quot;#欢迎来到-你的名字-的个人知识博客！&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到 [你的名字] 的个人知识博客！&quot;&gt;&lt;/a&gt;欢迎来到 [你的名字] 的个人知识博客！&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="个人介绍" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
